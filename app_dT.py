import streamlit as st
from PIL import Image
import numpy as np
from ultralytics import YOLO
from collections import Counter
import pandas as pd
import subprocess
import json
import os
import tempfile

# ----------------- CONFIGURATION -----------------
st.set_page_config(layout="wide")
MODEL_PATH = "models/best.pt"

@st.cache_resource
def load_yolo_model(path):
    try:
        model = YOLO(path)
        return model
    except Exception as e:
        return None

# ----------------- THERMAL ANALYSIS FUNCTIONS -----------------
def get_h20t_thermal_matrix(image_bytes):
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp:
            tmp.write(image_bytes)
            tmp_filename = tmp.name

        command = [
            'exiftool', '-j', '-PlanckR1', '-PlanckR2', '-PlanckB', 
            '-PlanckF', '-PlanckO', tmp_filename
        ]
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        metadata = json.loads(result.stdout)[0]

        R1 = metadata.get('PlanckR1')
        R2 = metadata.get('PlanckR2')
        B = metadata.get('PlanckB')
        F = metadata.get('PlanckF')
        O = metadata.get('PlanckO')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not all([R1, R2, B, F, O]):
             st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ Planck's constants ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô metadata ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û")
             return None

        command_raw = ['exiftool', '-b', '-RawThermalImage', tmp_filename]
        raw_result = subprocess.run(command_raw, capture_output=True, check=True)
        raw_thermal_bytes = raw_result.stdout

        raw_data = np.frombuffer(raw_thermal_bytes, dtype=np.uint16)
        
        # H20T ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î 640x512
        if raw_data.size != 640 * 512:
            st.warning(f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Raw Thermal Image ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏î‡πâ {raw_data.size}, ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á {640*512})")
            return None
            
        raw_data = raw_data.reshape((512, 640))

        temp_kelvin = B / np.log(R1 / (raw_data.astype(np.float32) - O) + F)
        temp_celsius = temp_kelvin - 273.15

        return temp_celsius

    except (subprocess.CalledProcessError, json.JSONDecodeError, FileNotFoundError, IndexError) as e:
        st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Radiometric ‡πÑ‡∏î‡πâ: {e}. ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà R-JPEG ‡∏à‡∏≤‡∏Å H20T ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ExifTool")
        return None
    finally:
        if 'tmp_filename' in locals() and os.path.exists(tmp_filename):
            os.remove(tmp_filename)

def analyze_anomalies_with_temp(yolo_results, temp_matrix, original_img_size):
    if temp_matrix is None:
        return [], None

    T_ref = np.median(temp_matrix)
    anomalies_details = []
    res = yolo_results[0]
    
    thermal_img_h, thermal_img_w = temp_matrix.shape
    original_w, original_h = original_img_size

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î
    w_ratio = thermal_img_w / original_w
    h_ratio = thermal_img_h / original_h

    for box in res.boxes:
        class_name = res.names[int(box.cls)]
        confidence = float(box.conf)
        x1, y1, x2, y2 = box.xyxy[0]

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î Bounding Box ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Thermal Matrix
        tx1 = int(x1 * w_ratio)
        ty1 = int(y1 * h_ratio)
        tx2 = int(x2 * w_ratio)
        ty2 = int(y2 * h_ratio)

        anomaly_zone = temp_matrix[ty1:ty2, tx1:tx2]
        if anomaly_zone.size == 0: continue

        T_max = np.max(anomaly_zone)
        delta_T = T_max - T_ref

        anomalies_details.append({
            "class": class_name,
            "confidence": confidence,
            "T_max_C": T_max,
            "Delta_T_C": delta_T
        })

    return anomalies_details, T_ref

# ----------------- UI & MAIN LOGIC -----------------
model = load_yolo_model(MODEL_PATH)
st.title("‚òÄÔ∏è Helios AI v2.0 - Advanced Thermal Analysis")

with st.sidebar:
    st.header("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    app_mode = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
        ("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (Single Image Analysis)", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î (Batch Processing)")
    )
    st.header("üõ†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    if app_mode == "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (Single Image Analysis)":
        uploaded_files = st.file_uploader(
            "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û R-JPEG", type=["jpg", "jpeg"], accept_multiple_files=False)
    else:
        uploaded_files = st.file_uploader(
            "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û R-JPEG (‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)", type=["jpg", "jpeg"], accept_multiple_files=True)
            
    confidence_threshold = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (Confidence)", 0.0, 1.0, 0.40, 0.05)
    st.info("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå R-JPEG ‡∏à‡∏≤‡∏Å DJI H20T")


if model is None:
    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå `models/best.pt` ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop()

if not uploaded_files:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    st.stop()

# --- ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ---
if app_mode == "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (Single Image Analysis)":
    uploaded_file = uploaded_files
    image = Image.open(uploaded_file)
    image_bytes = uploaded_file.getvalue()

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
        st.image(image, caption=f"‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name}", use_container_width=True)
    
    yolo_results = model(image, conf=confidence_threshold, verbose=False)
    temp_matrix = get_h20t_thermal_matrix(image_bytes)
    anomalies, T_ref = analyze_anomalies_with_temp(yolo_results, temp_matrix, image.size)

    with col2:
        st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å AI")
        annotated_frame = yolo_results[0].plot()
        st.image(annotated_frame, caption='‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö', use_container_width=True)
        
    st.header("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
    if temp_matrix is None:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÑ‡∏î‡πâ")
    elif not anomalies:
        st.success(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏î‡πÜ (‡∏ó‡∏µ‡πà Confidence > {confidence_threshold:.0%})")
        st.info(f"‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏á (T_ref): **{T_ref:.1f}¬∞C**")
    else:
        st.warning(f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ {len(anomalies)} ‡∏à‡∏∏‡∏î | T_ref: {T_ref:.1f}¬∞C")
        df = pd.DataFrame(anomalies)
        df_display = df.style.format({
            "confidence": "{:.1%}", "T_max_C": "{:.1f}¬∞C", "Delta_T_C": "{:+.1f}¬∞C"
        }).background_gradient(cmap='Reds', subset=['T_max_C', 'Delta_T_C'])
        st.dataframe(df_display, use_container_width=True, hide_index=True)

# --- ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà 2: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î ---
elif app_mode == "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î (Batch Processing)":
    st.header("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏ä‡∏∏‡∏î")
    results_list = []
    total_detections = Counter()
    files_with_anomalies_count = 0

    progress_bar = st.progress(0, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")

    for i, uploaded_file in enumerate(uploaded_files):
        progress_text = f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {uploaded_file.name}"
        progress_bar.progress((i + 1) / len(uploaded_files), text=progress_text)
        
        image = Image.open(uploaded_file)
        image_bytes = uploaded_file.getvalue()
        
        yolo_results = model(image, conf=confidence_threshold, verbose=False)
        temp_matrix = get_h20t_thermal_matrix(image_bytes)
        anomalies, T_ref = analyze_anomalies_with_temp(yolo_results, temp_matrix, image.size)
        
        if not anomalies:
            results_list.append({
                "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå": uploaded_file.name, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": "‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏û‡∏ö": "-",
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": 0, "T_max (¬∞C)": f"{T_ref:.1f}" if T_ref else "-", "ŒîT (¬∞C)": "-"
            })
        else:
            files_with_anomalies_count += 1
            highest_anomaly = max(anomalies, key=lambda x: x['T_max_C'])
            current_counts = Counter(a['class'] for a in anomalies)
            total_detections.update(current_counts)
            results_list.append({
                "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå": uploaded_file.name, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": "‚ö†Ô∏è ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏û‡∏ö": ", ".join(current_counts.keys()), "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": len(anomalies),
                "T_max (¬∞C)": f"{highest_anomaly['T_max_C']:.1f}", "ŒîT (¬∞C)": f"{highest_anomaly['Delta_T_C']:.1f}"
            })

    progress_bar.empty()

    st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå")
    df = pd.DataFrame(results_list)
    st.dataframe(df, use_container_width=True, hide_index=True)

    st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Overall Summary)")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{len(uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå")
    col2.metric("‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", f"{files_with_anomalies_count} ‡πÑ‡∏ü‡∏•‡πå")
    col3.metric("‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏Å‡∏ï‡∏¥", f"{len(uploaded_files) - files_with_anomalies_count} ‡πÑ‡∏ü‡∏•‡πå")

    if total_detections:
        st.markdown("---")
        st.write("#### ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
        metric_cols = st.columns(len(total_detections))
        for i, (name, count) in enumerate(total_detections.items()):
            metric_cols[i].metric(label=name, value=f"{count} ‡∏à‡∏∏‡∏î")