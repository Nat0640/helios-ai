import streamlit as st
from PIL import Image
import numpy as np
from ultralytics import YOLO
import cv2
from collections import Counter
import pandas as pd # ‡πÄ‡∏û‡∏¥‡πà‡∏° Library Pandas ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ß‡∏¢‡πÜ
from PIL.ExifTags import TAGS, GPSTAGS

# ----------------- CONFIGURATION -----------------
st.set_page_config(layout="wide")
MODEL_PATH = "models/best.pt"

@st.cache_resource
def load_yolo_model(path):
    try:
        model = YOLO(path)
        return model
    except Exception as e:
        return None

model = load_yolo_model(MODEL_PATH)

# ----------------- GPS ANALYSIS FUNCTION (‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà) -----------------
def get_gps_data(image):
    """
    ‡πÅ‡∏Å‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXIF ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î GPS ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Decimal Degrees
    """
    gps_data = {}
    try:
        exif_data = image._getexif()
        if not exif_data:
            return None

        for tag, value in exif_data.items():
            tag_name = TAGS.get(tag, tag)
            if tag_name == "GPSInfo":
                for key, val in value.items():
                    gps_tag_name = GPSTAGS.get(key, key)
                    gps_data[gps_tag_name] = val
                break
        
        if not gps_data:
            return None

        # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á DMS to DD ---
        def dms_to_dd(dms, ref):
            degrees = dms[0]
            minutes = dms[1] / 60.0
            seconds = dms[2] / 3600.0
            dd = degrees + minutes + seconds
            if ref in ['S', 'W']:
                dd *= -1
            return dd

        lat_dms = gps_data.get('GPSLatitude')
        lon_dms = gps_data.get('GPSLongitude')
        lat_ref = gps_data.get('GPSLatitudeRef')
        lon_ref = gps_data.get('GPSLongitudeRef')
        alt_rational = gps_data.get('GPSAltitude')

        if lat_dms and lon_dms and lat_ref and lon_ref:
            latitude = dms_to_dd(lat_dms, lat_ref)
            longitude = dms_to_dd(lon_dms, lon_ref)
            # ‡πÅ‡∏õ‡∏•‡∏á IFDRational ‡πÄ‡∏õ‡πá‡∏ô float ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
            altitude = float(alt_rational) if alt_rational is not None else None
            
            return {
                "latitude": latitude,
                "longitude": longitude,
                "altitude": altitude
            }
        return None

    except Exception:
        return None

# ----------------- UI & LAYOUT -----------------
st.title("‚òÄÔ∏è Helios AI - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡∏•‡∏≠‡∏¢‡∏ô‡πâ‡∏≥")

# --- Sidebar ---
with st.sidebar:
    st.header("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    
    # 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î
    app_mode = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
        ("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (Single Image Analysis)", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î (Batch Processing)")
    )
    
    st.header("üõ†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    # 2. ‡∏õ‡∏£‡∏±‡∏ö File Uploader ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
    if app_mode == "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (Single Image Analysis)":
        uploaded_files = st.file_uploader(
            "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô", 
            type=["jpg", "jpeg", "png"],
            accept_multiple_files=False # ‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
        )
    else:
        uploaded_files = st.file_uploader(
            "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô (‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)", 
            type=["jpg", "jpeg", "png"],
            accept_multiple_files=True # ‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
        )

    confidence_threshold = st.slider(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (Confidence)", 
        min_value=0.0, 
        max_value=1.0, 
        value=0.40,
        step=0.05
    )
    st.info("AI ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ")

# ----------------- MAIN LOGIC (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á) -----------------

# --- ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ---
if app_mode == "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (Single Image Analysis)":
    if uploaded_files and model:
        uploaded_file = uploaded_files 
        image = Image.open(uploaded_file)
        
        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô GPS ---
        gps_info = get_gps_data(image)

        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            st.image(image, caption=f"‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name}", use_container_width=True)
            
            # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS ---
            if gps_info:
                st.success("üõ∞Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS")
                st.write(f"**Latitude:** `{gps_info['latitude']:.6f}`")
                st.write(f"**Longitude:** `{gps_info['longitude']:.6f}`")
                if gps_info['altitude']:
                    st.write(f"**Altitude:** `{gps_info['altitude']:.2f}` ‡πÄ‡∏°‡∏ï‡∏£")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Link ‡πÑ‡∏õ Google Maps
                gmaps_link = f"https://www.google.com/maps?q={gps_info['latitude']},{gps_info['longitude']}"
                st.markdown(f"**[üìç ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Google Maps]({gmaps_link})**", unsafe_allow_html=True)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡πÄ‡∏•‡∏¢ (Bonus!)
                map_df = pd.DataFrame([gps_info], columns=['latitude', 'longitude'])
                st.map(map_df, zoom=18) # ‡∏õ‡∏£‡∏±‡∏ö zoom ‡πÑ‡∏î‡πâ
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")

        with col2:
            st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å AI")
            with st.spinner('AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...'):
                results = model(image, conf=confidence_threshold)
                annotated_frame = results[0].plot() # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ plot ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏Ç‡∏≠‡∏á YOLO ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ
                st.image(annotated_frame, caption='‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö', use_container_width=True)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
        detection_counts = Counter(results[0].names[int(c)] for c in results[0].boxes.cls)
        st.header("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö")
        if not detection_counts:
            st.success(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏î‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ {confidence_threshold:.0%}")
        else:
            st.warning(f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {sum(detection_counts.values())} ‡∏à‡∏∏‡∏î")
            metric_cols = st.columns(len(detection_counts))
            for i, (name, count) in enumerate(detection_counts.items()):
                with metric_cols[i]:
                    st.metric(label=f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {name}", value=f"{count} ‡∏à‡∏∏‡∏î")

# --- ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà 2: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î ---
elif app_mode == "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î (Batch Processing)":
    if uploaded_files and model:
        st.header("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏ä‡∏∏‡∏î")
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        results_list = []
        total_detections = Counter()
        files_with_anomalies = 0

        # ‡πÉ‡∏ä‡πâ Progress Bar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        progress_bar = st.progress(0, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")

        for i, uploaded_file in enumerate(uploaded_files):
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Progress Bar
            progress_text = f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name} ({i+1}/{len(uploaded_files)})"
            progress_bar.progress((i + 1) / len(uploaded_files), text=progress_text)
            
            image = Image.open(uploaded_file)
            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS ‡πÉ‡∏ô‡∏•‡∏π‡∏õ ---
            gps_info = get_gps_data(image)
            
            # ‡∏£‡∏±‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• (verbose=False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ log ‡∏£‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
            results = model(image, conf=confidence_threshold, verbose=False)
            
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
            current_detections = Counter(results[0].names[int(c)] for c in results[0].boxes.cls)
            
            if not current_detections:
                summary_text = "‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"
            else:
                summary_text = "‚ö†Ô∏è " + ", ".join([f"{name}: {count} ‡∏à‡∏∏‡∏î" for name, count in current_detections.items()])
                total_detections.update(current_detections)
                files_with_anomalies += 1
            
            file_result = {
                "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (File Name)": uploaded_file.name,
                "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (Result)": summary_text
            }
            if gps_info:
                file_result["Latitude"] = f"{gps_info['latitude']:.6f}"
                file_result["Longitude"] = f"{gps_info['longitude']:.6f}"
                file_result["Google Maps"] = f"https://www.google.com/maps?q={gps_info['latitude']},{gps_info['longitude']}"
            else:
                file_result["Latitude"] = "-"
                file_result["Longitude"] = "-"
                file_result["Google Maps"] = "-"
            
            results_list.append(file_result)
        
        progress_bar.empty() # ‡∏ã‡πà‡∏≠‡∏ô Progress Bar ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à

        # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ---
        st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå")
        df = pd.DataFrame(results_list)

        # --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Google Maps ‡πÄ‡∏õ‡πá‡∏ô Link ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ ---
        st.dataframe(
            df, 
            column_config={
                "Google Maps": st.column_config.LinkColumn(
                    "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà",
                    display_text="üìç ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"
                )
            },
            use_container_width=True, 
            hide_index=True
        )        

        # --- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
        st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Overall Summary)")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{len(uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå")
        with col2:
            st.metric("‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", f"{files_with_anomalies} ‡πÑ‡∏ü‡∏•‡πå")
        with col3:
            st.metric("‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏Å‡∏ï‡∏¥", f"{len(uploaded_files) - files_with_anomalies} ‡πÑ‡∏ü‡∏•‡πå")

        if total_detections:
            st.markdown("---")
            st.write("#### ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
            metric_cols = st.columns(len(total_detections))
            for i, (name, count) in enumerate(total_detections.items()):
                 with metric_cols[i]:
                    st.metric(label=name, value=f"{count} ‡∏à‡∏∏‡∏î")


if not uploaded_files:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

if not model:
     st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå `models/best.pt` ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")